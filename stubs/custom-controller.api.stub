<?php

namespace App\Http\Controllers\Api\V1{{namespace}}\Web;

use App\Http\Controllers\Api\BaseApiController;
use App\Http\Requests\{{modelName}}Request;
use App\Http\Resources\{{modelName}}Resource;
use App\Models\{{modelName}};
use App\Repositories\Contracts\{{modelName}}Contract;
use Exception;
use \Illuminate\Http\JsonResponse;

class {{modelName}}Controller extends BaseApiController
{
    /**
     * {{modelName}}Controller constructor.
     * @param {{modelName}}Contract $repository
     */
    public function __construct({{modelName}}Contract $repository)
    {
        parent::__construct($repository, {{modelName}}Resource::class, '{{modelName}}');
    }
    /**
     * Store a newly created resource in storage.
     * @param {{modelName}}Request $request
     * @return JsonResponse
     */
    public function store({{modelName}}Request $request): JsonResponse
    {
        try {
            ${{modelObject}} = $this->repository->create($request->validated());
            return $this->respondWithModel(${{modelObject}}->load($this->relations));
        }catch (Exception $e) {
            return $this->respondWithError($e->getMessage());
        }
    }
   /**
    * Display the specified resource.
    * @param {{modelName}} ${{modelObject}}
    * @return JsonResponse
    */
   public function show({{modelName}} ${{modelObject}}): JsonResponse
   {
       try {
           return $this->respondWithModel(${{modelObject}}->load($this->relations));
       }catch (Exception $e) {
           return $this->respondWithError($e->getMessage());
       }
   }
    /**
     * Update the specified resource in storage.
     *
     * @param {{modelName}}Request $request
     * @param {{modelName}} ${{modelObject}}
     * @return JsonResponse
     */
    public function update({{modelName}}Request $request, {{modelName}} ${{modelObject}}) : JsonResponse
    {
        try {
            ${{modelObject}} = $this->repository->update(${{modelObject}}, $request->validated());
            return $this->respondWithModel(${{modelObject}}->load($this->relations));
        }catch (Exception $e) {
            return $this->respondWithError($e->getMessage());
        }
    }
    /**
     * Remove the specified resource from storage.
     * @param {{modelName}} ${{modelObject}}
     * @return JsonResponse
     */
    public function destroy({{modelName}} ${{modelObject}}): JsonResponse
    {
        try {
            $this->repository->remove(${{modelObject}});
            return $this->respondWithSuccess(__('messages.deleted'));
        }catch (Exception $e) {
            return $this->respondWithError($e->getMessage());
        }
    }

    /**
     * active & inactive the specified resource from storage.
     * @param {{modelName}} ${{modelObject}}
     * @return JsonResponse
     */
    public function changeActivation({{modelName}} ${{modelObject}}): JsonResponse
    {
        try {
            $this->repository->toggleField(${{modelObject}}, 'is_active');
            return $this->respondWithModel(${{modelObject}}->load($this->relations));
        }catch (Exception $e) {
            return $this->respondWithError($e->getMessage());
        }
    }
}
