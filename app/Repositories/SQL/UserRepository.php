<?php

namespace App\Repositories\SQL;

use App\Models\User;
use App\Repositories\Contracts\RoleContract;
use App\Repositories\Contracts\UserContract;
use Illuminate\Database\Eloquent\Model;

class UserRepository extends BaseRepository implements UserContract
{
    /**
     * UserRepository constructor.
     * @param User $model
     */
    public function __construct(User $model)
    {
        parent::__construct($model);
    }

    public function create(array $attributes = []): mixed
    {
        $trashedEmail = $this->searchWithTrashed(['keyword' => $attributes['email']])->first();
        $this->freshRepo();
        $trashedPhone = $this->searchWithTrashed(['keyword' => $attributes['phone']])->first();
        $trashed = $trashedEmail ?? $trashedPhone;
        $role_id = $attributes['role_id'];
        $role = app(RoleContract::class)->find($role_id);
        if ($trashed){
            $trashed->restore();
            $user = $this->update($trashed, $attributes);
        }else{
            $user = parent::create($attributes);
            $user->assignRole($role);
        }
        return $user; // TODO: Change the autogenerated stub
    }

    public function update(Model $model, array $attributes = []): mixed
    {
        $user = parent::update($model, $attributes); // TODO: Change the autogenerated stub
        $user->syncRoles([$attributes['role_id']]);
        return $user->refresh();
    }

    public function prepareUserForRoleUsers($attributes): array
    {
        if (isset($attributes['user'])) {
            $user = resolve(UserContract::class)->create($attributes['user']);
            unset($attributes['user']);
            $attributes['user_id'] = $user->id;
        }
        return $attributes;
    }
}
